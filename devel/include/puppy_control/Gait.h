// Generated by gencpp from file puppy_control/Gait.msg
// DO NOT EDIT!


#ifndef PUPPY_CONTROL_MESSAGE_GAIT_H
#define PUPPY_CONTROL_MESSAGE_GAIT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace puppy_control
{
template <class ContainerAllocator>
struct Gait_
{
  typedef Gait_<ContainerAllocator> Type;

  Gait_()
    : overlap_time(0.0)
    , swing_time(0.0)
    , clearance_time(0.0)
    , z_clearance(0.0)  {
    }
  Gait_(const ContainerAllocator& _alloc)
    : overlap_time(0.0)
    , swing_time(0.0)
    , clearance_time(0.0)
    , z_clearance(0.0)  {
  (void)_alloc;
    }



   typedef float _overlap_time_type;
  _overlap_time_type overlap_time;

   typedef float _swing_time_type;
  _swing_time_type swing_time;

   typedef float _clearance_time_type;
  _clearance_time_type clearance_time;

   typedef float _z_clearance_type;
  _z_clearance_type z_clearance;





  typedef boost::shared_ptr< ::puppy_control::Gait_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::puppy_control::Gait_<ContainerAllocator> const> ConstPtr;

}; // struct Gait_

typedef ::puppy_control::Gait_<std::allocator<void> > Gait;

typedef boost::shared_ptr< ::puppy_control::Gait > GaitPtr;
typedef boost::shared_ptr< ::puppy_control::Gait const> GaitConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::puppy_control::Gait_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::puppy_control::Gait_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::puppy_control::Gait_<ContainerAllocator1> & lhs, const ::puppy_control::Gait_<ContainerAllocator2> & rhs)
{
  return lhs.overlap_time == rhs.overlap_time &&
    lhs.swing_time == rhs.swing_time &&
    lhs.clearance_time == rhs.clearance_time &&
    lhs.z_clearance == rhs.z_clearance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::puppy_control::Gait_<ContainerAllocator1> & lhs, const ::puppy_control::Gait_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace puppy_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::puppy_control::Gait_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::puppy_control::Gait_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::puppy_control::Gait_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::puppy_control::Gait_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::puppy_control::Gait_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::puppy_control::Gait_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::puppy_control::Gait_<ContainerAllocator> >
{
  static const char* value()
  {
    return "85570b63b58df2eb52f0cdc5f4a30db8";
  }

  static const char* value(const ::puppy_control::Gait_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x85570b63b58df2ebULL;
  static const uint64_t static_value2 = 0x52f0cdc5f4a30db8ULL;
};

template<class ContainerAllocator>
struct DataType< ::puppy_control::Gait_<ContainerAllocator> >
{
  static const char* value()
  {
    return "puppy_control/Gait";
  }

  static const char* value(const ::puppy_control::Gait_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::puppy_control::Gait_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 overlap_time\n"
"float32 swing_time\n"
"float32 clearance_time\n"
"float32 z_clearance\n"
;
  }

  static const char* value(const ::puppy_control::Gait_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::puppy_control::Gait_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.overlap_time);
      stream.next(m.swing_time);
      stream.next(m.clearance_time);
      stream.next(m.z_clearance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gait_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::puppy_control::Gait_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::puppy_control::Gait_<ContainerAllocator>& v)
  {
    s << indent << "overlap_time: ";
    Printer<float>::stream(s, indent + "  ", v.overlap_time);
    s << indent << "swing_time: ";
    Printer<float>::stream(s, indent + "  ", v.swing_time);
    s << indent << "clearance_time: ";
    Printer<float>::stream(s, indent + "  ", v.clearance_time);
    s << indent << "z_clearance: ";
    Printer<float>::stream(s, indent + "  ", v.z_clearance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PUPPY_CONTROL_MESSAGE_GAIT_H
