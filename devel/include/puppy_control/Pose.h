// Generated by gencpp from file puppy_control/Pose.msg
// DO NOT EDIT!


#ifndef PUPPY_CONTROL_MESSAGE_POSE_H
#define PUPPY_CONTROL_MESSAGE_POSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace puppy_control
{
template <class ContainerAllocator>
struct Pose_
{
  typedef Pose_<ContainerAllocator> Type;

  Pose_()
    : roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , height(0.0)
    , x_shift(0.0)
    , stance_x(0.0)
    , stance_y(0.0)
    , run_time(0)  {
    }
  Pose_(const ContainerAllocator& _alloc)
    : roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , height(0.0)
    , x_shift(0.0)
    , stance_x(0.0)
    , stance_y(0.0)
    , run_time(0)  {
  (void)_alloc;
    }



   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _height_type;
  _height_type height;

   typedef float _x_shift_type;
  _x_shift_type x_shift;

   typedef float _stance_x_type;
  _stance_x_type stance_x;

   typedef float _stance_y_type;
  _stance_y_type stance_y;

   typedef int32_t _run_time_type;
  _run_time_type run_time;





  typedef boost::shared_ptr< ::puppy_control::Pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::puppy_control::Pose_<ContainerAllocator> const> ConstPtr;

}; // struct Pose_

typedef ::puppy_control::Pose_<std::allocator<void> > Pose;

typedef boost::shared_ptr< ::puppy_control::Pose > PosePtr;
typedef boost::shared_ptr< ::puppy_control::Pose const> PoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::puppy_control::Pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::puppy_control::Pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::puppy_control::Pose_<ContainerAllocator1> & lhs, const ::puppy_control::Pose_<ContainerAllocator2> & rhs)
{
  return lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.height == rhs.height &&
    lhs.x_shift == rhs.x_shift &&
    lhs.stance_x == rhs.stance_x &&
    lhs.stance_y == rhs.stance_y &&
    lhs.run_time == rhs.run_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::puppy_control::Pose_<ContainerAllocator1> & lhs, const ::puppy_control::Pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace puppy_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::puppy_control::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::puppy_control::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::puppy_control::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::puppy_control::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::puppy_control::Pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::puppy_control::Pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::puppy_control::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "baecb41f8598067f3a25cfb12cfeb74d";
  }

  static const char* value(const ::puppy_control::Pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbaecb41f8598067fULL;
  static const uint64_t static_value2 = 0x3a25cfb12cfeb74dULL;
};

template<class ContainerAllocator>
struct DataType< ::puppy_control::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "puppy_control/Pose";
  }

  static const char* value(const ::puppy_control::Pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::puppy_control::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
"float32 height\n"
"float32 x_shift\n"
"float32 stance_x\n"
"float32 stance_y\n"
"\n"
"int32 run_time\n"
;
  }

  static const char* value(const ::puppy_control::Pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::puppy_control::Pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.height);
      stream.next(m.x_shift);
      stream.next(m.stance_x);
      stream.next(m.stance_y);
      stream.next(m.run_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::puppy_control::Pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::puppy_control::Pose_<ContainerAllocator>& v)
  {
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "x_shift: ";
    Printer<float>::stream(s, indent + "  ", v.x_shift);
    s << indent << "stance_x: ";
    Printer<float>::stream(s, indent + "  ", v.stance_x);
    s << indent << "stance_y: ";
    Printer<float>::stream(s, indent + "  ", v.stance_y);
    s << indent << "run_time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.run_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PUPPY_CONTROL_MESSAGE_POSE_H
