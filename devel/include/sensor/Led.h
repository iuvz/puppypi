// Generated by gencpp from file sensor/Led.msg
// DO NOT EDIT!


#ifndef SENSOR_MESSAGE_LED_H
#define SENSOR_MESSAGE_LED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor/RGB.h>

namespace sensor
{
template <class ContainerAllocator>
struct Led_
{
  typedef Led_<ContainerAllocator> Type;

  Led_()
    : index(0)
    , rgb()  {
    }
  Led_(const ContainerAllocator& _alloc)
    : index(0)
    , rgb(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _index_type;
  _index_type index;

   typedef  ::sensor::RGB_<ContainerAllocator>  _rgb_type;
  _rgb_type rgb;





  typedef boost::shared_ptr< ::sensor::Led_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor::Led_<ContainerAllocator> const> ConstPtr;

}; // struct Led_

typedef ::sensor::Led_<std::allocator<void> > Led;

typedef boost::shared_ptr< ::sensor::Led > LedPtr;
typedef boost::shared_ptr< ::sensor::Led const> LedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor::Led_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor::Led_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor::Led_<ContainerAllocator1> & lhs, const ::sensor::Led_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.rgb == rhs.rgb;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor::Led_<ContainerAllocator1> & lhs, const ::sensor::Led_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sensor::Led_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor::Led_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor::Led_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor::Led_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor::Led_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor::Led_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor::Led_<ContainerAllocator> >
{
  static const char* value()
  {
    return "30e1b14f90ea917fa794eb562e3a6723";
  }

  static const char* value(const ::sensor::Led_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x30e1b14f90ea917fULL;
  static const uint64_t static_value2 = 0xa794eb562e3a6723ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor::Led_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor/Led";
  }

  static const char* value(const ::sensor::Led_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor::Led_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 index\n"
"sensor/RGB rgb\n"
"\n"
"================================================================================\n"
"MSG: sensor/RGB\n"
"uint8 r\n"
"uint8 g\n"
"uint8 b\n"
;
  }

  static const char* value(const ::sensor::Led_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor::Led_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.rgb);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Led_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor::Led_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor::Led_<ContainerAllocator>& v)
  {
    s << indent << "index: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.index);
    s << indent << "rgb: ";
    s << std::endl;
    Printer< ::sensor::RGB_<ContainerAllocator> >::stream(s, indent + "  ", v.rgb);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_MESSAGE_LED_H
